{{define "SimpleSingletonService"}}

package {{.PackageName}}

import (
	"context"
	"strings"

	"github.com/bytedance/sonic"
	"golang.org/x/xerrors"
)

type {{.ServiceClassName}} struct {
}

// Constructor of {{.ServiceClassName}}
func New{{.ServiceClassName}}() *{{.ServiceClassName}} {
	return &{{.ServiceClassName}}{}
}

// wire

var singleton{{.ServiceClassName}} *{{.ServiceClassName}} = initSingleton{{.ServiceClassName}}()

func GetSingleton{{.ServiceClassName}}() *{{.ServiceClassName}} {
	return singleton{{.ServiceClassName}}
}

func initSingleton{{.ServiceClassName}}() *{{.ServiceClassName}} {
	return New{{.ServiceClassName}}()
}

// methods

func (p *{{.ServiceClassName}}) HelloWorlds(ctx context.Context, worldsJson string) (string, error) {
	var worlds []string

	var err = sonic.UnmarshalString(worldsJson, &worlds)
	if err != nil {
		return "", xerrors.Errorf("Json unmarshal error: %w", err)
	}

	var message = strings.Builder{}

	_, err = message.WriteString("Hello: ")
	if err != nil {
		return "", xerrors.Errorf(": %w", err)
	}

	for _, world := range worlds {
		message.WriteString(world + ", ")
	}

	return strings.TrimSpace(message.String()) + "!", nil
}


{{end}}